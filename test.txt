public class InterruptThread {
    //interrupt可以通过异常方式通知
    private static class MyThread1 extends Thread{
        @Override
        public void run() {
            while(true){
                try{
                    Thread.sleep(1000_0000);
                }catch(InterruptedException e){
                    //收到中断通知
                    System.out.println("1:"+isInterrupted());
                    break;
                }
            }
            System.out.println("退出");
        }
    }
    private static class MyThread2 extends Thread{
        @Override
        public void run() {
            while(!isInterrupted()){
            }
            //通过判断中断状态退出，状态不会被重置
            System.out.println("2:"+isInterrupted());
            System.out.println("退出");
        }
    }
    private static class MyThread3 extends Thread{
        @Override
        public void run() {
            while(!Thread.interrupted()){
            }
            //通过判断中断状态退出，状态会被重置
            System.out.println("3:"+isInterrupted());
            System.out.println("退出");
        }
    }
    public static void main(String[] args) {
        Thread thread1=new MyThread1();
        thread1.start();
        thread1.interrupt();

        Thread thread2=new MyThread2();
        thread2.start();
        thread2.interrupt();

        Thread thread3=new MyThread3();
        thread3.start();
        thread3.interrupt();
    }
}
